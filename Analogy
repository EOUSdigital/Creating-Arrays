// 🧩 Challenge: Simulate a 6-Slot Schedule and Fill 2 Random Parts

//?  🧠 Goal:
//  1. Create a schedule array with 6 empty slots
//  2. Randomly pick 2 unique time slots
//  3. Fill those 2 with random task names (e.g., 'Workout', 'Call', 'Code')
//  4. Print the schedule with an emoji for each.

//! ✅ Step-by-Step Plan

//* ✅ Step 1: Create the schedule

const timetable = new Array(6).fill('empty');

//* ✅ Step 2: Create a task list

const toDo = ['Wake up', 'Wash up', 'Make bed', 'Breakfast', 'Morning exercise', 'Study JavaScript'];

//* ✅ Step 3: Randomly assign 2 unique tasks
//  1. Use Math.floor(Math.random() * 6).
//  2. Use a while loop or a Set to avoid duplicates.

const usedIndexes = new Set();

while (usedIndexes.size < 2) {
    const randomIndex = Math.floor(Math.random() * 6);
    if (!usedIndexes.has(randomIndex)) {
        const randomTask = toDo[Math.floor(Math.random() * toDo.length)];
        timetable[randomIndex] = randomTask;
        usedIndexes.add(randomIndex);
    }
};

//* ✅ Step 4: Print each slot with status

timetable.forEach(toDo => {
    const condition = toDo === ' ' ? '❌' : '✅';
    console.log(`${condition} ${toDo}`);
});

// 🧩 Challenge: “Smart Backpack Inventory”

//* Let’s make a backpack manager that lets us:

//  🎒 Add or remove items
//  📦 View how many items are packed
//  🔁 Automatically reverse the list
//  🔍 Check if a specific item is inside

//! Solution:

//* Step 1:
const backpack = ['water', 'map', 'compass'];

//* Step 2:

backpack.push('fire cracker');
backpack.unshift('beanie');

console.log(`📦 Total items: ${backpack.length}`);


//* Step 3:

backpack.reverse();
console.log('🎒 Backpack contents:', backpack);

const newBackpack = backpack.splice(0, 1);
console.log('🎒 Backpack contents:', backpack);

//* Step 4:

if (backpack.includes('map')) {
    console.log('✅ map is packed!');
} else {
    console.log('❌ map is missing!');
};

const itemToCheck = 'laptop';

if (backpack.includes(itemToCheck)) {
    console.log(`✅ ${itemToCheck} is in the backpack!`);
} else {
    console.log(`❌ ${itemToCheck} is not in the backpack!`);
};


//* Step 5:

backpack.push('flashlight');
console.log('🎒 Backpack contents:', backpack);


// 🧩 Challenge: “Are You Ready to Travel?”

//* 🧠 Scenario:

//  We are packing for a trip. You must have 3 required items:
//  - 'passport'
//  - 'ticket'
//  - 'wallet'

//  We will check a user’s backpack to see:
//  - ✅ If each required item is packed
//  - ❌ If any are missing

//* ✅ Challenge Steps:
//  1. Create an array backpack with any items (some required, some not)
//  2. Create an array requiredItems with the 3 needed ones
//  3. Loop through requiredItems
//  4. For each, check:
//  - If it is included in backpack, log ✅
//  - If not, log ❌

const packingTrip = ['passport', 'ticket', 'wallet', 'cap', 'jumper', 'umbrella', 'trousers', 'shoe', 'socks', 'knife'];
const itemsToCheck = ['passport', 'ticket', 'wallet'];

function checkPackingList(packingTrip, itemsToCheck) {
    let missingItems = 0;
    itemsToCheck.forEach(item => {
        if (packingTrip.includes(item)) {
            console.log(`✅ ${item} are in the backpack!`);
        } else {
            console.log(`❌ ${item} are not in the backpack!`);
        };
    });
    
    if (missingItems === 0) {
        console.log('🟢 You are ready to travel!');
    } else {
        console.log('🔴 You are missing essential items!');
    };
};

checkPackingList(packingTrip, itemsToCheck);

//! Forbidden Items

const forbiddenItems = ['knife', 'explosives', 'scissors'];

function isItemAllowed(packingTrip, forbiddenItems) {
    let prohibitedItems = 0;
    forbiddenItems.forEach(banned => {
        if (packingTrip.includes(banned)) {
            console.log(`🔴 ${banned} are in the backpack!`);
            prohibitedItems++;
        } else {
            console.log(`🟢 ${banned} are not in the backpack!`);
        };
    });

    if (prohibitedItems >= 1) {
        console.log('🔴 You are not allowed to travel!');
    } else {
        console.log('🟢 You are allowed to travel!');
    };
};

isItemAllowed(packingTrip, forbiddenItems);
